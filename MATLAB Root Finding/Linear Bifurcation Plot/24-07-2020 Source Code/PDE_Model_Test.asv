% The parameter settings to be used for simulations of the Schnakenberg
% reaction-diffusion system.
a = 0.2;
b = 1.3;

%The diffusion coefficients for simulations of the PDE model.
Du = 1;
Dv = 119;

%The fixed point for our model.
u_fixed = b + a;
v_fixed = b/((b+a).^2);

%The number of points which we wish to divide the space interval into.
n = 100;

%The maximum and minimum spatial values that we wish to use for
%simulations.
x_max = 100;
x_min = 0;

%The discretised space values that will be used in simulations of our PDE.
x_values = (x_min + ((0:n)/n) .*(x_max-x_min))';

%The space step size for our numerical simulations.
h = (x_max - x_min)/n;

%The initial data at t=0 for our simulation.
u0 = @(x) u_fixed + 0.001*(sin(sqrt(2)*x) + cos(x));
v0 = @(x) v_fixed + 0.001*(sin(sqrt(2)*x) + cos(x));
initial_data = [u0(x_values) ; v0(x_values)];

%The derivative function for our model.
dydt = @(t,y) computeNoDelaySchnakenbergDerivative(a,b,Du,Dv,n,h,t,y);


%The time mesh for our model.
t_mesh = linspace(1,100,100);


[time_mesh,solution_mesh] = ode23(dydt,t_mesh,initial_data);
u_values = y_values(:,1:n+1);
v_values = y_values(:,n+1+(1:(n+1)));

[XX,YY] = meshgrid(x_values,t_mesh);

hold off;
figure(1);
h1=surf(XX,YY, u_values);%, 'FaceColor','interp', 'EdgeColor', 'none');
view([0  90])
axis square
grid off
set(h1, 'EdgeColor','none')
colorbar

figure(2);
h2=surf(XX,YY, v_values);%, 'FaceColor','interp', 'EdgeColor', 'none');
view([0  90])
axis square
grid off
set(h2, 'EdgeColor','none')
colorbar



function derivative = computeFixedDelaySchnakenbergDerivative(a,b,Du,Dv,n,h,t,y,Z)
    %The functions for the schnakenberg system.
    schnakenberg_u = @(u,v,u_tau,v_tau) a - u + (u_tau.^2) .*v_tau;
    schnakenberg_v = @(u,v,u_tau,v_tau) b - (u_tau.^2) .*v_tau;
    
    
    second_derivative_matrix = -2.*diag(ones(1,n+1)) + diag(ones(1,n),1) + diag(ones(1,n),-1);
    second_derivative_matrix(1,:) = zeros(1,n+1);
    second_derivative_matrix(n+1,:) = zeros(1,n+1);

    top_row = zeros(1,n+1);
    top_row(1) = -2;
    top_row(2) = 2;

    bottom_row = zeros(1,n+1);
    bottom_row(n) = -2;
    bottom_row(n-1) = 2;

    second_derivative_matrix(1,:) = top_row;
    second_derivative_matrix(n+1,:) = bottom_row;


    %schnakenberg = @(u,v) [schnakenberg_u(u,v); schnakenberg_v(u,v)];


    u_derivative_matrix = (Du./(h.^2)) .* second_derivative_matrix;
    v_derivative_matrix = (Dv./(h.^2)) .* second_derivative_matrix;


    dudt = @(u,v,u_tau,v_tau) u_derivative_matrix * u + schnakenberg_u(u,v,u_tau,v_tau);
    dvdt = @(u,v,u_tau,v_tau) v_derivative_matrix * v + schnakenberg_v(u,v,u_tau,v_tau);
    
    u_values = y(1:(n+1));
    v_values =  y(n+1+(1:(n+1)));
    
    u_tau_values = Z(1:(n+1), 1);
    v_tau_values = Z(n+1+(1:(n+1)), 1);

    derivative = [dudt(u_values, v_values, u_tau_values, v_tau_values); dvdt(u_values, v_values, u_tau_values, v_tau_values)];
end

function derivative = computeNoDelaySchnakenbergDerivative(a,b,Du,Dv,n,h,t,y)
    %The functions for the schnakenberg system.
    schnakenberg_u = @(u,v) a - u + (u.^2) .*v;
    schnakenberg_v = @(u,v) b - (u.^2) .*v;
    
    
    second_derivative_matrix = -2.*diag(ones(1,n+1)) + diag(ones(1,n),1) + diag(ones(1,n),-1);
    second_derivative_matrix(1,:) = zeros(1,n+1);
    second_derivative_matrix(n+1,:) = zeros(1,n+1);

    top_row = zeros(1,n+1);
    top_row(1) = -2;
    top_row(2) = 2;

    bottom_row = zeros(1,n+1);
    bottom_row(n) = -2;
    bottom_row(n-1) = 2;

    second_derivative_matrix(1,:) = top_row;
    second_derivative_matrix(n+1,:) = bottom_row;


    %schnakenberg = @(u,v) [schnakenberg_u(u,v); schnakenberg_v(u,v)];


    u_derivative_matrix = (Du./(h.^2)) .* second_derivative_matrix;
    v_derivative_matrix = (Dv./(h.^2)) .* second_derivative_matrix;


    dudt = @(u,v) u_derivative_matrix * u + schnakenberg_u(u,v);
    dvdt = @(u,v) v_derivative_matrix * v + schnakenberg_v(u,v);

    derivative = [dudt(y(1:(n+1)), y(n+1 + (1:(n+1)))); dvdt(y(1:(n+1)), y(n+1 + (1:(n+1))))];
end